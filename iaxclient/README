=======================================================================
INTRODUCTION

This is iaxclient, a portable IAX/IAX2 protocol telephony client library.

The library itself is in the directory "lib", located in the same
directory as this README file.

The library is designed to build for multiple platforms, and currently
supports Linux, MacOSX, Solaris, and Win32 platforms.  It is designed to handle
the "backend" of IAX telephony operations, including call handling,
network protocols, audio encoding/decoding, and audio capture/playback.
In it's future, it may be extended to also handle video encode, decode,
capture and playback.

There are also sample clients, which use the library, included here.

Currently, these are all stored under the "simpleclient" directory, and
there are three of them:

simpleclient/testcall:  A simple command-line oriented test program,
			useful for testing and debugging.   It supports 
			all of the same platforms as the library itself.

simpleclient/wx:	A wxWindows (see wxwindows.org) based GUI
			client.  This client also supports all of the
			same platforms as the library itself.

simpleclient/WinIAX:  	A MSVC/Win32 client.  This only works with
			Win32, obviously, and was contributed by
			Faizan "Tili" Naqvi <faizan@tilizone.com>

simpleclient/tkiaxphone	A command-line client, with a Tcl/Tk GUI
			client that drives it.  It should work on
			all the platforms


The home page for iaxclient is "http://iaxclient.sourceforge.net/"

Up-to-date versions of iaxclient are available from a sourceforge CVS
repository.

CVS tarballs are also available as a link from the home page.


=======================================================================
LICENSES


The iaxclient library itself, is provided under the terms of the LGPL:

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

The iaxclient library may also include, when compiled, works distributed
under other licenses.  See those directories and source files for
specifics.  These include:

    libiax: 		(c) 2001 Mark Spencer under the LGPL.
    libiax2: 		(c) 2001 Mark Spencer under the LGPL.
    gsm encoder:	Copyright 1992, 1993, 1994 by Jutta Degener 
			and Carsten Bormann, Technische Universitaet Berlin
			(free license, terms in gsm/copyright)
    portaudio:		Copyright (c) 1999-2000 Ross Bencina and Phil Burk
			Modified BSD style license, in portaudio/LICENSE.txt

    sox tools: 		compand.c: Copyright 1999 Chris Bagwell And 
					Nick Bailey
			resample.c: (not currently used) Copyright 1991
			Lance Norskog And Sundry Contributors, 
			free licenses in source files.
    libspeex:		(c) various authors
			BSD-like license.


=======================================================================
CONTRIBUTORS:

IAXCLIENT itself was contributed to by:

Steve Kann <stevek@stevek.com>
Shawn Lawrence <shawn.lawrence@terracecomm.com>
Faizan "Tili" Naqvi <faizan@tilizone.com> [Win32 VC++ build/client]
Scott Lambert <lambert@lambertfam.org> [FreeBSD build changes]
Michael Van Donselaar <mvand@vandonselaar.org> [Win32/MinGW build directions, UI changes, IAXComm phone ]
Steven Sokol <ssokol@sokol-associates.com> [ Debugging, Blind Transfer ]
Stephan Kauss <Stephan@kauss.org> [ 32-bit alignment for IAX2 ]
Stephen Uhler <suhler@sun.com> [Solaris build, tkiaxphone]



In addition to including libiax, IAXCLIENT is also based in part on code
included in test clients within libiax itself.

The included sub-libraries, including libiax, libiax2, gsm, portaudio,
and the sox-derived filters, were developed by others, as noted in above
and in their sources.  We couldn't have built IAXCLIENT (or, it would
have been much more difficult!) without the great work from these
projects.

=======================================================================
BUILDING THE LIBRARY:

Linux: type "make" using standard gnu make/gcc
FreeBSD: type "gmake" using standard gnu make/gcc
MacOSX: type "make" using Apple Dev Tools (gnu make/gcc)
Win32: type "make" using Cygwin/MinGW (see below)
Solaris: type "gmake" using standard gnu make/gcc


Cygwin/MinGW:
The Win32 build has been tested using the Cygwin Environment, and the
MinGW port of the GCC compiler suite.  

See http://www.mingw.org/mingwfaq.shtml#faq-usingwithcygwin for the
MinGW FAQ entry on using MinGW with Cygwin.  You do need to make sure
that you install the Gnu "make" utility when you install cygwin.

It should probably also work if you use the MSYS environment and the
MinGW compiler, but this configuration is not as well tested.

=======================================================================
LIBRARY ORGANIZATION/DESIGN/CODING CONVENTION NOTES

The iaxclient library is designed to be a small, simple library that
encapsulates all that you need in order to make IAX protocol telephony
programs.

All exported symbols should be prefixed with "iaxc_", to avoid namespace
collisions/pollution in programs using this library.

The header file "iaxclient.h" should contain those declarations needed
by client programs, but not rely on other headers (i.e. those from
included libraries).  The "iaxclient-lib.h" header file is the main
header file for the library's internal declarations.


=======================================================================

SAMPLE CLIENTS

The "testcall" sample program, provided in the simpleclient/testcall
directory (above this "lib" directory) is a simple client program which
should also be portable.  

The Makefile for "testcall" will automatically build or update the
library when it it built, and the requirements for building testcall are
the same as for the library itself.


See README files in the other sample clients for directions for building
these.


